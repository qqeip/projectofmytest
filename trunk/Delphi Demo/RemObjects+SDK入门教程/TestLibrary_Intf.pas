unit TestLibrary_Intf;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I Remobjects.inc}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROXMLIntf, uROClasses, uROClient, uROTypes, uROClientIntf;

const
  { Library ID }
  LibraryUID = '{D221B0BC-B766-4A8C-A796-487491EA699D}';
  TargetNamespace = '';

  { Service Interface ID's }
  ITestService_IID : TGUID = '{4D1B4633-0779-410F-B078-0D05BB284EC2}';

  { Event ID's }

type
  { Forward declarations }
  ITestService = interface;


  { ITestService }
  ITestService = interface
    ['{4D1B4633-0779-410F-B078-0D05BB284EC2}']
    function Sum(const A: Integer; const B: Integer): Integer;
    function GetServerTime: DateTime;
  end;

  { CoTestService }
  CoTestService = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ITestService;
  end;

  { TTestService_Proxy }
  TTestService_Proxy = class(TROProxy, ITestService)
  protected
    function __GetInterfaceName:string; override;

    function Sum(const A: Integer; const B: Integer): Integer;
    function GetServerTime: DateTime;
  end;

implementation

uses
  {vcl:} SysUtils,
  {RemObjects:} uROEventRepository, uROSerializer, uRORes;

{ CoTestService }

class function CoTestService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ITestService;
begin
  result := TTestService_Proxy.Create(aMessage, aTransportChannel);
end;

{ TTestService_Proxy }

function TTestService_Proxy.__GetInterfaceName:string;
begin
  result := 'TestService';
end;

function TTestService_Proxy.Sum(const A: Integer; const B: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'TestLibrary', __InterfaceName, 'Sum');
    __Message.Write('A', TypeInfo(Integer), A, []);
    __Message.Write('B', TypeInfo(Integer), B, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TTestService_Proxy.GetServerTime: DateTime;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'TestLibrary', __InterfaceName, 'GetServerTime');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(DateTime), result, [paIsDateTime]);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

initialization
  RegisterProxyClass(ITestService_IID, TTestService_Proxy);


finalization
  UnregisterProxyClass(ITestService_IID);

end.
