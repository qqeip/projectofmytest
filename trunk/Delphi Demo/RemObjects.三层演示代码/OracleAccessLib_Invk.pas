unit OracleAccessLib_Invk;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

interface

uses
  {vcl:} Classes,
  {RemObjects:} uROServer, uROServerIntf, uROTypes, uROClientIntf,
  {Generated:} OracleAccessLib_Intf;

type
  TOracleAccessService_Invoker = class(TROInvoker)
  private
  protected
  published
    procedure Invoke_openQuery(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_ExecSQL(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
  end;

implementation

uses
  {RemObjects:} uRORes, uROClient;

{ TOracleAccessService_Invoker }

procedure TOracleAccessService_Invoker.Invoke_openQuery(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function openQuery(const SQLCommand: String): String; }
var
  SQLCommand: String;
  lResult: String;
begin
  try
    __Message.Read('SQLCommand', TypeInfo(String), SQLCommand, []);

    lResult := (__Instance as IOracleAccessService).openQuery(SQLCommand);

    __Message.InitializeResponseMessage(__Transport, 'OracleAccessLib', 'OracleAccessService', 'openQueryResponse');
    __Message.Write('Result', TypeInfo(String), lResult, []);
    __Message.Finalize;

  finally
  end;
end;

procedure TOracleAccessService_Invoker.Invoke_ExecSQL(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function ExecSQL(const SQLCommand: String): Boolean; }
var
  SQLCommand: String;
  lResult: Boolean;
begin
  try
    __Message.Read('SQLCommand', TypeInfo(String), SQLCommand, []);

    lResult := (__Instance as IOracleAccessService).ExecSQL(SQLCommand);

    __Message.InitializeResponseMessage(__Transport, 'OracleAccessLib', 'OracleAccessService', 'ExecSQLResponse');
    __Message.Write('Result', TypeInfo(Boolean), lResult, []);
    __Message.Finalize;

  finally
  end;
end;

end.
