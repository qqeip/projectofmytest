unit OracleAccessLib_Intf;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROClasses, uROClient, uROTypes, uROClientIntf;

const
  { Library ID }
  LibraryUID = '{92FC5493-181F-41D1-BDB6-0160941BB15B}';

  { Service Interface ID's }
  IOracleAccessService_IID : TGUID = '{F74F95CA-3A80-4CB7-AE6D-90213E15D696}';

  { Event ID's }

type
  { Forward declarations }
  IOracleAccessService = interface;


  { IOracleAccessService }

  { Description:
      ORACLEDATBase Access  2007.10.24 }
  IOracleAccessService = interface
    ['{F74F95CA-3A80-4CB7-AE6D-90213E15D696}']
    function openQuery(const SQLCommand: String): String;
    function ExecSQL(const SQLCommand: String): Boolean;
  end;

  { CoOracleAccessService }
  CoOracleAccessService = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IOracleAccessService;
  end;

  { TOracleAccessService_Proxy }
  TOracleAccessService_Proxy = class(TROProxy, IOracleAccessService)
  protected
    function __GetInterfaceName:string; override;

    function openQuery(const SQLCommand: String): String;
    function ExecSQL(const SQLCommand: String): Boolean;
  end;

implementation

uses
  {vcl:} SysUtils,
  {RemObjects:} uROEventRepository, uRORes;

{ CoOracleAccessService }

class function CoOracleAccessService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IOracleAccessService;
begin
  result := TOracleAccessService_Proxy.Create(aMessage, aTransportChannel);
end;

{ TOracleAccessService_Proxy }

function TOracleAccessService_Proxy.__GetInterfaceName:string;
begin
  result := 'OracleAccessService';
end;

function TOracleAccessService_Proxy.openQuery(const SQLCommand: String): String;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'OracleAccessLib', __InterfaceName, 'openQuery');
    __Message.Write('SQLCommand', TypeInfo(String), SQLCommand, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(String), result, []);
  finally
    __Message.FreeStream;
  end
end;

function TOracleAccessService_Proxy.ExecSQL(const SQLCommand: String): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'OracleAccessLib', __InterfaceName, 'ExecSQL');
    __Message.Write('SQLCommand', TypeInfo(String), SQLCommand, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.FreeStream;
  end
end;

initialization
  RegisterProxyClass(IOracleAccessService_IID, TOracleAccessService_Proxy);


finalization
  UnregisterProxyClass(IOracleAccessService_IID);

end.
