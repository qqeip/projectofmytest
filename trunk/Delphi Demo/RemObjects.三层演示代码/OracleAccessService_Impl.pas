unit OracleAccessService_Impl;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ This is where you are supposed to code the implementation of your objects. }
{----------------------------------------------------------------------------}

interface

uses
  {vcl:} Classes, SysUtils, 
  {RemObjects:} uROClientIntf, uROTypes, uROServer, uROServerIntf, uROSessions,
  {Required:} uRORemoteDataModule,
  {Generated:} OracleAccessLib_Intf,ADODB_TLB;

type
  { TOracleAccessService }
  TOracleAccessService = class(TRORemoteDataModule, IOracleAccessService)
  private
  protected
    { IOracleAccessService methods }
    function openQuery(const SQLCommand: String): String;
    function ExecSQL(const SQLCommand: String): Boolean;
  end;

implementation

{$R *.dfm}
uses
  {Generated:} OracleAccessLib_Invk,uROClassFactories,Ado_ConnectionPool,
  uADOLib,fServerForm,gunFunSys;

procedure Create_OracleAccessService(out anInstance : IUnknown);
begin
  anInstance := TOracleAccessService.Create(nil);
end;

{ OracleAccessService }
function TOracleAccessService.openQuery(const SQLCommand: String): String;
var
  Connection:_Connection;
begin
   Result:='';
   try
     ConnectionPools.CreateInstance(Connection);
     try
      if Connection=nil then   Raise Exception.Create('取ado连接出错!');
      result := OpenXMLRecordset(Connection, SQLCommand, ['%'], TRUE);
      WriteToMemo(ServerForm.Memo1,'查询SQL:->:'+SQLCommand);
     finally
       if (Connection <> nil) then ConnectionPools.ReleaseInstance(Connection);
     end;
   except
      Raise;
   end;
end;

function TOracleAccessService.ExecSQL(const SQLCommand: String): Boolean;
var
  i:integer;
  Connection:_Connection;
  RecordsAffected : integer;
begin
  Result:=False;
  try
      ConnectionPools.CreateInstance(Connection);
      try
        if Connection=nil then   Raise Exception.Create('取Ado连接失败');
        try
         i:=Connection.BeginTrans;
         if i<>1 then
         begin
           Raise Exception.Create('事务启动失败,请稍候重试!');
         end;
         ExecuteCommand(Connection,SQLCommand,[], RecordsAffected);
         WriteToMemo(ServerForm.Memo1,'执行SQL:->:'+SQLCommand);
         Connection.CommitTrans;
         Result:=True;
        except
          Raise;
        end;
      finally
         if (Connection <> nil) then ConnectionPools.ReleaseInstance(
           Connection);
      end;
    except
      Raise;
    end;
end;

initialization
  TROPooledClassFactory.Create('OracleAccessService', Create_OracleAccessService,
    TOracleAccessService_Invoker,100,pbCreateAdditional,true);
finalization

end.
