unit OracleAccessLib_Async;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROClasses, uROTypes, uROClientIntf, uROAsync,
  {Project:} OracleAccessLib_Intf;

type
  { IOracleAccessService_Async }
  IOracleAccessService_Async = interface(IROAsyncInterface)
    ['{AC7624AA-9CE2-467A-8BF0-CDC8498F910D}']
    procedure Invoke_openQuery(const SQLCommand: String);
    procedure Invoke_ExecSQL(const SQLCommand: String);
    function Retrieve_openQuery: String;
    function Retrieve_ExecSQL: Boolean;
  end;

  { CoOracleAccessService_Async }
  CoOracleAccessService_Async = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IOracleAccessService_Async;
  end;

  { TOracleAccessService_AsyncProxy }
  TOracleAccessService_AsyncProxy = class(TROAsyncProxy, IOracleAccessService_Async)
  private
  protected
    function __GetInterfaceName:string; override;

    procedure Invoke_openQuery(const SQLCommand: String);
    procedure Invoke_ExecSQL(const SQLCommand: String);
    function Retrieve_openQuery: String;
    function Retrieve_ExecSQL: Boolean;
  end;

implementation

uses
  {vcl:} SysUtils;

{ CoOracleAccessService }

class function CoOracleAccessService_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IOracleAccessService_Async;
begin
  result := TOracleAccessService_AsyncProxy.Create(aMessage, aTransportChannel);
end;

{ TOracleAccessService_AsyncProxy }

function TOracleAccessService_AsyncProxy.__GetInterfaceName:string;
begin
  result := 'OracleAccessService';
end;

procedure TOracleAccessService_AsyncProxy.Invoke_openQuery(const SQLCommand: String);
begin
  __AssertProxyNotBusy('openQuery');

  __Message.InitializeRequestMessage(__TransportChannel, 'OracleAccessLib', __InterfaceName, 'openQuery');
  __Message.Write('SQLCommand', TypeInfo(String), SQLCommand, []);
  __DispatchAsyncRequest('openQuery',__Message);
end;

function TOracleAccessService_AsyncProxy.Retrieve_openQuery: String;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('openQuery');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(String), Result, []);

  __response.Free();
end;

procedure TOracleAccessService_AsyncProxy.Invoke_ExecSQL(const SQLCommand: String);
begin
  __AssertProxyNotBusy('ExecSQL');

  __Message.InitializeRequestMessage(__TransportChannel, 'OracleAccessLib', __InterfaceName, 'ExecSQL');
  __Message.Write('SQLCommand', TypeInfo(String), SQLCommand, []);
  __DispatchAsyncRequest('ExecSQL',__Message);
end;

function TOracleAccessService_AsyncProxy.Retrieve_ExecSQL: Boolean;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('ExecSQL');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Boolean), Result, []);

  __response.Free();
end;


initialization
end.
